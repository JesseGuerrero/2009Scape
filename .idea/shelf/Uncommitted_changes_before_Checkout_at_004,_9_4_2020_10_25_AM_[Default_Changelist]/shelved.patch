Index: Server/src/main/java/Server/plugin/dialogue/HansDialoguePlugin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package plugin.dialogue;\r\n\r\nimport core.game.node.entity.npc.NPC;\r\nimport core.game.node.entity.player.link.IronmanMode;\r\nimport core.plugin.InitializablePlugin;\r\nimport core.game.node.entity.player.Player;\r\n\r\n\r\n/**\r\n * Represents the dialogue plugin used for the hans npc.\r\n */\r\n@InitializablePlugin\r\npublic final class HansDialoguePlugin extends DialoguePlugin {\r\n\r\n\tprivate int[] timePlayed = new int[3];\r\n\tprivate int joinDateDays;\r\n\r\n\t/**\r\n\t * Constructs a new {@code HansDialoguePlugin} {@code Object}.\r\n\t */\r\n\tpublic HansDialoguePlugin() {\r\n\t\t/**\r\n\t\t * empty.\r\n\t\t */\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new {@code HansDialoguePlugin} {@code Object}.\r\n\t * @param player the player.\r\n\t */\r\n\tpublic HansDialoguePlugin(Player player) {\r\n\t\tsuper(player);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic DialoguePlugin newInstance(Player player) {\r\n\t\treturn new HansDialoguePlugin(player);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean open(Object... args) {\r\n\t\tnpc = (NPC) args[0];\r\n\t\tinterpreter.sendDialogues(npc, FacialExpression.FRIENDLY, \"Hello, welcome to the server\");\r\n\t\tstage = 0;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean handle(int interfaceId, int buttonId) {\r\n\r\n\t\tswitch (stage) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif(player.getName().equalsIgnoreCase(\"jawarrior1\")) {\r\n\t\t\t\t\tinterpreter.sendOptions(\"Administrative settings\", \"prestige\", \"xp rate\", \"exit\");\r\n\t\t\t\t\tstage = 12;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinterpreter.sendOptions(\"Account settings\", \"Prestige\", \"I have come to kill everyone in this castle!\", \"I don't know. I'm lost. Where am I?\", \"Account Options...\");\r\n\t\t\t\t\tstage++;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tswitch (buttonId) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.THINKING, \"Let's find out what we can do\");\r\n\t\t\t\t\t\tstage = 12;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tend();\r\n\t\t\t\t\t\tnpc.sendChat(\"Help! Help!\");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.NEUTRAL, \"You are in Lumbridge Castle.\");\r\n\t\t\t\t\t\tstage = 50;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\tinterpreter.sendOptions(\"Select an Option\", \"Have you been here as long as me?\", \"What is the xp rate...\", \"About Iron Man mode...\",\"About random events...\", \"Go Back...\");\r\n\t\t\t\t\t\tstage = 10;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 10:\r\n\t\t\t\tswitch (buttonId) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t//Have you been here as long as me?\r\n\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.NEUTRAL, \"I've been patrolling this castle for years!\");\r\n\t\t\t\t\t\tstage = 41;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tnpc(\"The XP rate for all players is: \" + player.getSkills().experienceMutiplier);\r\n\t\t\t\t\t\tstage = 50; //50 is end\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t//About Iron Man Mode...\r\n\t\t\t\t\t\tif (player.getIronmanManager().isIronman()) {\r\n\t\t\t\t\t\t\tnpc(\"Your ironman mode is: \" + player.getIronmanManager().getMode().name().toLowerCase());\r\n\t\t\t\t\t\t\tstage = 50;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinterpreter.sendOptions(\"Select an Option\", \"I would like to be an Iron Man.\", \"What is an Iron Man?\", \"Go Back...\");\r\n\t\t\t\t\t\t\tstage = 110;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\tif(player.getAntiMacroHandler().isDisabled){\r\n\t\t\t\t\t\t\tinterpreter.sendOptions(\"Select an Option\",\"I want to enable random events.\",\"Nevermind.\");\r\n\t\t\t\t\t\t\tstage = 130;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinterpreter.sendOptions(\"Select an Option\",\"I want to disable random events.\",\"Nevermind.\");\r\n\t\t\t\t\t\t\tstage = 135;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase 5: // Go back\r\n\t\t\t\t\t\tinterpreter.sendOptions(\"Select an Option\", \"I'm looking for whoever is in charge of this place.\", \"I have come to kill everyone in this castle!\", \"I don't know. I'm lost. Where am I?\", \"More Options...\");\r\n\t\t\t\t\t\tstage = 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 11:\r\n\t\t\t\tif(player.getSkills().experienceMutiplier == 5.0) {\r\n\t\t\t\t\tplayer.newPlayer = player.getSkills().getTotalLevel() < 50;\r\n\t\t\t\t\toptions(\"Change xp rate\", \"Nevermind.\");\r\n\t\t\t\t\tstage++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnpc(\"You can only change your rate once, sorry.\");\r\n\t\t\t\t\tstage = 131;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 12:\r\n\t\t\t\tswitch(buttonId){\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tif(player.getSkills().getMasteredSkills() > 0) {\r\n\t\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.AMAZED,\"Good job you have a 99!\");\r\n\t\t\t\t\t\t\tstage = 990;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tnpc(\"You must have a 99 to prestige, currently you do not.\");\r\n\t\t\t\t\t\t\tstage = 50;\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tinterpreter.sendOptions(\"XP Rate\", \"2.5x\", \"10x\", \"25x\", \"65x\");\r\n\t\t\t\t\t\tstage++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3://button option\r\n\t\t\t\t\t\tstage = 50;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 13:\r\n\t\t\t\tswitch(buttonId){\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tplayer.getSkills().experienceMutiplier = 2.5;\r\n\t\t\t\t\t\tstage = 14;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tplayer.getSkills().experienceMutiplier = 10.0;\r\n\t\t\t\t\t\tstage = 14;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tplayer.getSkills().experienceMutiplier = 25.0;\r\n\t\t\t\t\t\tstage = 14;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\tplayer.getSkills().experienceMutiplier = 65.0;\r\n\t\t\t\t\t\tstage = 14;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tnpc(\"One moment, please...\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase 14:\r\n\t\t\t\tnpc(\"Tada, your xp rate is now \" + player.getSkills().experienceMutiplier);\r\n\t\t\t\tstage = 131;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 15:\r\n\t\t\t\tnpc(\"Sorry, only new accounts can select 2.5x.\");\r\n\t\t\t\tstage = 131;\r\n\t\t\t\tbreak;\r\n\t\t\t\t//Have you been here as long as me?\r\n\t\t\tcase 41:\r\n\t\t\t\tinterpreter.sendDialogues(player, FacialExpression.THINKING, \"You must be old then?\");\r\n\t\t\t\tstage++;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 42:\r\n\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.LAUGH, \"Haha, you could say I'm quite the veteran of these lands.\", \"Yes, I've been here a fair while...\");\r\n\t\t\t\tstage++;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 43: //mixing OSRS here\r\n\t\t\t\tinterpreter.sendDialogues(player, FacialExpression.ASKING, \"Can you tell me how long I've been here?\");\r\n\t\t\t\tstage++;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 44:\r\n\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.FRIENDLY, \"Ahh, I see all the newcomers arriving in Lumbridge, fresh-faced \",\"and eager for adventure. I remember you...\");\r\n\t\t\t\tplayer.sendMessage(\"Feature not currently available.\");\r\n\t\t\t\tstage = 50;\r\n\t\t\t\tbreak;\r\n\t\t\t\t//TODO:\r\n\t\t\t/*case 45:\r\n\t\t\t\tgetTimePlayed();\r\n\r\n\t\t\t\t//The text:\r\n\t\t\t\t//NOTE: it splits the text in different spots if the hours/minutes/days are 0 (because 0 days sounds weird, so it doesn't show it).\r\n\r\n\t\t\t\t//You've spent [amount] days, [amount] hours, [amount] minutes in the world (NEXT LINE) since you arrived [amount] days ago.\r\n\t\t\t\t//You've spent [amount] (days/hours), [amount] (hours/minutes) in the world since (NEXT LINE) you arrived [amount] days ago.\r\n\t\t\t\t//You've spent [amount] (days/hours/minutes) in the world since you arrived (NEXT LINE) [amount] days ago.\r\n\t\t\t*/\r\n\r\n\t\t\t//Closing Chat\r\n\t\t\tcase 50:\r\n\t\t\t\tend();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t//About Iron Man Mode...\r\n\t\t\tcase 100:\r\n\t\t\t\tswitch (buttonId) {\r\n\t\t\t\t\tcase 1: //no longer want to be iron\r\n\t\t\t\t\t\tif (player.getSavedData().getActivityData().getHardcoreDeath() == true) {\r\n\t\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.GUILTY, \"Sorry, but you've fallen as a Hardcore Iron Man\", \"already. It would be unfair for those with other\", \" restrictions if your status were to be removed!\");\r\n\t\t\t\t\t\t\tstage = 50;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (player.getSkills().getTotalLevel() > 500 || player.getQuestRepository().getPoints() > 10){\r\n\t\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.GUILTY, \"Sorry, but you are too far along your journey.\", \"It would be unfair for those with other\", \" restrictions if your status were to be removed!\");\r\n\t\t\t\t\t\t\tstage = 50;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.NEUTRAL, \"I have removed your Iron Man status.\");\r\n\t\t\t\t\t\t\tplayer.getIronmanManager().setMode(IronmanMode.NONE);\r\n\t\t\t\t\t\t\tplayer.sendMessage(\"Your Iron Man status has been removed.\");\r\n\t\t\t\t\t\t\tstage = 50;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase 2: //change ironman mode\r\n\t\t\t\t\t\tif (player.getSavedData().getActivityData().getHardcoreDeath() == true) {\r\n\t\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.GUILTY, \"Sorry, but you've fallen as a Hardcore Iron Man\", \"already. It would be unfair for those with other\", \" restrictions if your status were to be changed!\");\r\n\t\t\t\t\t\t\tstage = 50;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (player.getSkills().getTotalLevel() > 500 || player.getQuestRepository().getPoints() > 10){\r\n\t\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.GUILTY, \"Sorry, but you are too far along your journey.\", \"It would be unfair for those with other\", \" restrictions if your status were to be changed!\");\r\n\t\t\t\t\t\t\tstage = 50;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinterpreter.sendOptions(\"Select a Mode\", \"Standard\", \"<col=8A0808>Hardcore</col>\", \"<col=ECEBEB>Ultimate</col>\", \"Nevermind.\");\r\n\t\t\t\t\t\t\tstage = 150;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase 3: // What is Iron Man Mode?\r\n\t\t\t\t\t\tinterpreter.sendDialogues(player, FacialExpression.ASKING,\"What is an Iron Man?\");\r\n\t\t\t\t\t\tstage = 120;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4: //Go back.\r\n\t\t\t\t\t\tinterpreter.sendOptions(\"Select an Option\", \"Have you been here as long as me?\", \"I'd like to learn faster!\", \"About Iron Man mode...\", \"Go Back...\");\r\n\t\t\t\t\t\tstage = 10;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 110:\r\n\t\t\t\tswitch (buttonId) {\r\n\t\t\t\t\tcase 1: //I would like to be an Iron Man\r\n\t\t\t\t\t\tif (player.getSkills().getTotalLevel() > 500 || player.getQuestRepository().getPoints() > 10){\r\n\t\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.GUILTY, \"Sorry, but you are too far along your journey.\", \"It would be unfair for those with other\", \" restrictions if your status were to be changed!\");\r\n\t\t\t\t\t\t\tstage = 50;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinterpreter.sendOptions(\"Select a Mode\", \"Standard\", \"<col=8A0808>Hardcore</col>\", \"<col=ECEBEB>Ultimate</col>\", \"Nevermind.\");\r\n\t\t\t\t\t\t\tstage = 150;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase 2: // What is Iron Man Mode?\r\n\t\t\t\t\t\tplayer(\"What is an Iron Man?\");\r\n\t\t\t\t\t\tstage = 120;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3: //Go back.\r\n\t\t\t\t\t\tinterpreter.sendOptions(\"Select an Option\", \"Have you been here as long as me?\", \"I'd like to learn faster!\", \"About Iron Man mode...\", \"Go Back...\");\r\n\t\t\t\t\t\tstage = 10;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t//What is an Iron Man?\r\n\t\t\tcase 120:\r\n\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.NEUTRAL,\"An Iron Man account is a style of playing where players\", \"are completely self-sufficient.\");\r\n\t\t\t\tstage++;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 121:\r\n\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.NEUTRAL,\"A Standard Ironman does not receive items or\", \"assistance from other players. They cannot trade, stake,\", \"receive PK loot, scavenge dropped items, nor play\", \"certain minigames.\");\r\n\t\t\t\tstage++;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 122:\r\n\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.NEUTRAL,\"In addition to Standard Ironman restrictions,\", \"<col=8A0808>Hardcore</col> Ironmen only have one life. In the event of\",\"a dangerous death, a player will be downgraded to a\", \"Standard Ironman, and their stats frozen on the hiscores.\");\r\n\t\t\t\tstage++;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 123:\r\n\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.NEUTRAL,\"For the ultimate challenge, players who choose the\", \"<col=ECEBEB>Ultimate</col> Ironman mode cannot use banks, nor\", \"retain any items on death in dangerous areas.\");\r\n\t\t\t\tstage++;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 124:\r\n\t\t\t\tif (player.getIronmanManager().isIronman()) {\r\n\t\t\t\t\tinterpreter.sendOptions(\"Select an Option\", \"I no longer want to be an Iron Man\", \"I'd like to change my Iron Man mode\", \"What is an Iron Man?\", \"Go Back.\");\r\n\t\t\t\t\tstage = 100;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinterpreter.sendOptions(\"Select an Option\", \"I would like to be an Iron Man.\", \"What is an Iron Man?\", \"Go Back...\");\r\n\t\t\t\t\tstage = 110;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 130:\r\n\t\t\t\tswitch(buttonId){\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tnpc(\"Voila, you should now get random events!\");\r\n\t\t\t\t\t\tplayer.getAntiMacroHandler().isDisabled = false;\r\n\t\t\t\t\t\tplayer.setAttribute(\"randoms:disabled\",false);\r\n\t\t\t\t\t\tplayer.getAntiMacroHandler().init();\r\n\t\t\t\t\t\tstage = 131;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tplayer(\"Never mind.\");\r\n\t\t\t\t\t\tstage = 131;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 131:\r\n\t\t\t\tend();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 135:\r\n\t\t\t\tswitch(buttonId){\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tnpc(\"Voila, you shouldn't get random events now!\");\r\n\t\t\t\t\t\tplayer.getAntiMacroHandler().isDisabled = true;\r\n\t\t\t\t\t\tplayer.setAttribute(\"/save:randoms:disabled\",true);\r\n\t\t\t\t\t\tstage = 131;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tplayer(\"Never mind.\");\r\n\t\t\t\t\t\tstage = 131;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//Change Iron man mode dialogue/code\r\n\t\t\tcase 150:\r\n\t\t\t\tswitch(buttonId){\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.NEUTRAL,\"I have changed your Iron Man mode to: \",\"\" + (buttonId == 1 ? \"Standard\" : \"<col=8A0808>Hardcore</col>\" + \" Ironman mode.\"));\r\n\t\t\t\t\t\tplayer.getIronmanManager().setMode(IronmanMode.values()[buttonId]);\r\n\t\t\t\t\t\tplayer.sendMessage(\"Your Iron Man status has been changed.\");\r\n\t\t\t\t\t\tstage = 50;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3: //ultimate ironman\r\n\t\t\t\t\t\tif (!player.getBank().isEmpty())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.GUILTY, \"Sorry, but your bank is has items in it.\", \"Please empty your bank and speak to me again.\");\r\n\t\t\t\t\t\t\tstage = 50;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else{\r\n\t\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.NEUTRAL,\"I have changed your Iron Man mode to:\",\"<col=ECEBEB>Ultimate</col> Ironman mode.\");\r\n\t\t\t\t\t\t\tplayer.getIronmanManager().setMode(IronmanMode.ULTIMATE);\r\n\t\t\t\t\t\t\tplayer.sendMessage(\"Your Iron Man status has been changed.\");\r\n\t\t\t\t\t\t\tstage = 50;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\tif (player.getIronmanManager().isIronman()) {\r\n\t\t\t\t\t\t\tinterpreter.sendOptions(\"Select an Option\", \"I no longer want to be an Iron Man\", \"I'd like to change my Iron Man mode\", \"What is an Iron Man?\", \"Go Back...\");\r\n\t\t\t\t\t\t\tstage = 100;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinterpreter.sendOptions(\"Select an Option\", \"I would like to be an Iron Man.\", \"What is an Iron Man?\", \"Go Back...\");\r\n\t\t\t\t\t\t\tstage = 110;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\r\n\t\t\t//About XP Multiplier\r\n\t\t\tcase 200:\r\n\t\t\t\tinterpreter.sendOptions(\"Select an Option\", \"Set my experience rate to 10x\", \"Nevermind.\");\r\n\t\t\t\tstage++;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 201:\r\n\t\t\t\tswitch (buttonId) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.FRIENDLY, \"Tada! Your experience rate is now 10x.\", \"Happy Scaping!\");\r\n\t\t\t\t\t\tplayer.getSkills().experienceMutiplier = 10.0;\r\n\t\t\t\t\t\tstage = 50;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t    end();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 990://start doing prestige\r\n\t\t\t\tinterpreter.sendOptions(\"Prestige settings\", \"Attack\", \"Strength\", \"Defence\", \"Thieving\", \"Other skills(exit)...\");\r\n\t\t\t\tstage++;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 991:\r\n\t\t\t\tswitch(buttonId){\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.THINKING, \"Looks like its not implemented\");\r\n\t\t\t\t\t\t//prestige attack\r\n\t\t\t\t\t\tstage = 999;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.THINKING, \"Looks like its not implemented\");\r\n\t\t\t\t\t\t//prestige strength\r\n\t\t\t\t\t\tstage = 999;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.THINKING, \"Looks like its not implemented\");\r\n\t\t\t\t\t\t//prestige defence\r\n\t\t\t\t\t\tstage = 999;\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\tinterpreter.sendDialogues(npc, FacialExpression.THINKING, \"well see\");\r\n\t\t\t\t\t\t//prestige thievery\r\n\t\t\t\t\t\tstage = 999;\r\n\t\t\t\t\tcase 5://exit\r\n\t\t\t\t\t\tstage = 999;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 999:\r\n\t\t\t\tend();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Obtains the player's join date and time played.\r\n\t */\r\n\tprivate void getPlayerTime() {\r\n\r\n\t\t//TODO:\r\n\t\t// Find the Date Joined and Time Played variables for the player WITHOUT directly connecting to the SQL database here\r\n\t\t// Split the Time Played variable into Days, Hours and Minutes\r\n\t\t// Insert each calculation into the timePlayed array ( 0 for Days, 1 for Hours and 2 for Minutes)\r\n\t\t// Calculate the Days Since registering by subtracting the Date Joined from the Current Server Date (ServerDate - Join_Date)\r\n\t\t// Insert the date difference into joinDateDays variable\r\n\t\t// return;???\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int[] getIds() {\r\n\t\treturn new int[] { 0 };\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Server/src/main/java/Server/plugin/dialogue/HansDialoguePlugin.java	(revision 61b8cd0b4d8789d9e0f5e23e19215748def26c45)
+++ Server/src/main/java/Server/plugin/dialogue/HansDialoguePlugin.java	(date 1599232077006)
@@ -141,7 +141,7 @@
 
 						break;
 					case 2:
-						interpreter.sendOptions("XP Rate", "2.5x", "10x", "25x", "65x");
+						interpreter.sendOptions("XP Rate", "2.5x", "25x", "65x", "300x");
 						stage++;
 						break;
 					case 3://button option
@@ -156,15 +156,15 @@
 						stage = 14;
 						break;
 					case 2:
-						player.getSkills().experienceMutiplier = 10.0;
+						player.getSkills().experienceMutiplier = 25.0;
 						stage = 14;
 						break;
 					case 3:
-						player.getSkills().experienceMutiplier = 25.0;
+						player.getSkills().experienceMutiplier = 65.0;
 						stage = 14;
 						break;
 					case 4:
-						player.getSkills().experienceMutiplier = 65.0;
+						player.getSkills().experienceMutiplier = 300.0;
 						stage = 14;
 						break;
 				}
Index: Server/src/main/java/Server/plugin/command/PlayerCommandPlugin.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package plugin.command\r\n\r\nimport core.cache.def.impl.ItemDefinition\r\nimport core.cache.def.impl.NPCDefinition\r\nimport core.game.component.Component\r\nimport core.game.node.entity.npc.drop.DropFrequency\r\nimport core.game.node.entity.player.Player\r\nimport core.game.node.entity.player.info.PlayerDetails\r\nimport core.game.node.entity.player.info.Rights\r\nimport core.game.node.entity.player.info.login.PlayerParser\r\nimport core.game.node.entity.player.link.IronmanMode\r\nimport core.game.node.entity.player.link.RunScript\r\nimport core.game.node.entity.player.link.quest.QuestRepository\r\nimport core.game.node.entity.player.link.statistics.PlayerStatisticsManager\r\nimport core.game.node.item.ChanceItem\r\nimport core.game.system.command.CommandPlugin\r\nimport core.game.system.command.CommandSet\r\nimport core.game.system.communication.ClanRepository\r\nimport core.game.system.communication.CommunicationInfo\r\nimport core.game.world.GameWorld\r\nimport core.game.world.map.RegionManager\r\nimport core.game.world.repository.Repository\r\nimport core.game.world.update.flag.context.Animation\r\nimport core.net.amsc.WorldCommunicator\r\nimport core.plugin.InitializablePlugin\r\nimport core.plugin.Plugin\r\nimport core.tools.RandomFunction\r\nimport core.tools.StringUtils\r\nimport plugin.ge.GEOfferDispatch\r\nimport plugin.skill.Skills\r\n\r\n/**\r\n * Handles a player command.\r\n * @author Vexia\r\n */\r\n@InitializablePlugin\r\nclass PlayerCommandPlugin : CommandPlugin() {\r\n    @Throws(Throwable::class)\r\n    override fun newInstance(arg: Any?): Plugin<Any?>? {\r\n        link(CommandSet.PLAYER)\r\n        return this\r\n    }\r\n\r\n    override fun parse(player: Player?, name: String?, arguments: Array<String?>?): Boolean {\r\n        when (name) {\r\n            \"stats\" -> {\r\n                PlayerStatisticsManager.sendHiscore(player, player)\r\n            }\r\n            \"bank\" -> if (!player!!.isAdmin) {\r\n                player.sendChat(\"Hey, everyone, I just tried to do something very silly!\")\r\n            }\r\n            \"bankresettabs\" -> {\r\n                var i = 0\r\n                while (i < player!!.bank.tabStartSlot.size) {\r\n                    player.bank.tabStartSlot[i] = 0\r\n                    i++\r\n                }\r\n                player.bank.tabIndex = 10\r\n                if (player.bank.isOpen) {\r\n                    player.interfaceManager.close()\r\n                }\r\n                player.sendMessage(\"<col=3498db>Your bank tabs have been reset!\")\r\n                return true\r\n            }\r\n            \"ge\" -> {\r\n                val offers = HashMap<Int,Int>()\r\n                for(offer in GEOfferDispatch.offerMapping.values){\r\n                    val item = offer.itemId\r\n                    val amount = offer.amount - offer.completedAmount\r\n                    if(offers[item] == null){\r\n                        offers[item] = amount\r\n                    } else {\r\n                        offers[item] = offers[item]!!.plus(amount)\r\n                    }\r\n                }\r\n                for (i in 0..310) {\r\n                    player!!.packetDispatch.sendString(\"\", 275, i)\r\n                }\r\n                var lineId = 11\r\n                player!!.packetDispatch.sendString(\"Active Sell Offers\", 275, 2)\r\n                var counter = 0\r\n                for(i in 0..299) {\r\n                    val offer = offers.entries.elementAtOrNull(i)\r\n                    if (offer != null)\r\n                        player.packetDispatch.sendString(\"${ItemDefinition.forId(offer.key).name} x${offer.value}\", 275, lineId++)\r\n                    else\r\n                        player.packetDispatch.sendString(\"\", 275, lineId++)\r\n                }\r\n\r\n                player.interfaceManager.open(Component(275))\r\n                return true\r\n            }\r\n            \"bankresetpin\" -> {\r\n                if (arguments!!.size < 2) {\r\n                    player!!.sendMessage(\"<col=e74c3c>You must specify your current pin!\")\r\n                    return true\r\n                }\r\n                val oldPin = arguments[1] ?: return true\r\n                if (!player!!.bankPinManager.hasPin()) {\r\n                    player.sendMessage(\"<col=e74c3c>You don't currently have a pin set.\")\r\n                    return true\r\n                }\r\n                if (oldPin != player.bankPinManager.pin) {\r\n                    player.sendMessage(\"<col=e74c3c>$oldPin doesn't match your current pin.\")\r\n                    return true\r\n                }\r\n                player.bankPinManager.pin = null\r\n                player.sendMessage(\"<col=3498db>Your pin has been reset.\")\r\n                return true\r\n            }\r\n            \"players\" -> {\r\n                val totalCount = Repository.getPlayers().size\r\n                var ironmanCount = 0\r\n                var hardcoreIronmanCount = 0\r\n                var ultIronmanCount = 0\r\n                var botCount = 0\r\n                for (p in Repository.getPlayers()) {\r\n                    if (p.ironmanManager.mode == IronmanMode.ULTIMATE) { //If this was check restriction, ultimate irons would be counted as all\r\n                        ultIronmanCount++ //three modes, affecting the player count\r\n                    } else if (p.ironmanManager.mode == IronmanMode.HARDCORE) {\r\n                        hardcoreIronmanCount++\r\n                    } else if (p.ironmanManager.mode == IronmanMode.STANDARD) {\r\n                        ironmanCount++\r\n                    }\r\n                    if (p.isArtificial) {\r\n                        botCount++\r\n                    }\r\n                }\r\n                val regular = totalCount - ironmanCount - hardcoreIronmanCount - ultIronmanCount - botCount\r\n                val playerCount = totalCount - botCount\r\n                if (totalCount == 1) {\r\n                    player!!.sendMessage(\"<col=3498db>There is 1 active player in this world.\")\r\n                } else {\r\n                    player!!.sendMessage(\"<col=3498db>There are $playerCount active players in this world: $regular regular, $ironmanCount IM, $hardcoreIronmanCount HCIM, $ultIronmanCount UIM.\")\r\n                }\r\n                return player.rights === Rights.REGULAR_PLAYER\r\n            }\r\n            \"yell\" -> {\r\n                if (!player!!.isAdmin) {\r\n                    player.sendMessages(\"Join clan chat \\\"\" + GameWorld.getName() + \"\\\" to talk globally.\")\r\n                    return true\r\n                }\r\n                if (player.details.isMuted) {\r\n                    player.sendMessage(\"<col=e74c3c>You have been \" + (if (player.details.isPermMute) \"permanently\" else \"temporarily\") + \" muted due to breaking a rule.\")\r\n                    return true\r\n                }\r\n                if (WorldCommunicator.isEnabled()) {\r\n                    if (ClanRepository.getDefault().isBanned(player.name)) {\r\n                        player.sendMessages(\"<col=e74c3c>You are temporarily unable to yell as you are banned from the main clan chat.\", \"Don't be annoying!\")\r\n                        return true\r\n                    }\r\n                }\r\n                var text = getArgumentLine(arguments!!)\r\n                if (text.contains(\"<img=\") || text.contains(\"<br>\") || text.contains(\"<col=\") || text.contains(\"<shad=\")) {\r\n                    player.sendMessage(\"<col=e74c3c>Bad! No images/text effects allowed in yell chat.\")\r\n                    return true\r\n                }\r\n                var length = text.length\r\n                if (length > 100) {\r\n                    length = 100\r\n                }\r\n                if (text.length >= 2) {\r\n                    if (Character.isLowerCase(text[0])) {\r\n                        text = Character.toUpperCase(text[0]).toString() + text.substring(1, length)\r\n                    }\r\n                    text = getYellPrefix(player) + text + \"</col>\"\r\n                    for (p in Repository.getPlayers()) {\r\n                        if (p.isActive) {\r\n                            p.packetDispatch.sendMessage(text)\r\n                        }\r\n                    }\r\n                } else {\r\n                    player.sendMessage(\"<col=e74c3c>Your message was too short.\")\r\n                }\r\n                return true\r\n            }\r\n            \"togglenews\" -> {\r\n                player!!.savedData.globalData.isDisableNews = !player.savedData.globalData.isDisableNews\r\n                player.sendMessage(\"<col=3498db>\" + if (player.savedData.globalData.isDisableNews) \"You will no longer see news notifications.\" else \"You will now see news notifications.\")\r\n                return true\r\n            }\r\n            \"commands\", \"command\", \"commandlist\" -> {\r\n                sendCommands(player)\r\n                return true\r\n            }\r\n            \"quests\" -> {\r\n                sendQuests(player)\r\n                return true\r\n            }\r\n            \"roll\" -> {\r\n                rollSkill(player)\r\n                return true\r\n            }\r\n            \"drops\" -> {\r\n                if (arguments!!.size > 0) {\r\n                    val npcid = toInteger(arguments[1]!!)\r\n                    getDrops(player, npcid)\r\n                } else {\r\n                    player!!.packetDispatch.sendMessage(\"Syntax: ::getdrops id\")\r\n                }\r\n                return true\r\n            }\r\n            \"npcs\" -> {\r\n                getNPCs(player)\r\n                return true\r\n            }\r\n            \"reply\" -> {\r\n                if (player!!.interfaceManager.isOpened) {\r\n                    player.sendMessage(\"<col=e74c3c>Please finish what you're doing first.\")\r\n                    return true\r\n                }\r\n                if (player.attributes.containsKey(\"replyTo\")) {\r\n                    player.setAttribute(\"keepDialogueAlive\", true)\r\n                    val replyTo = player.getAttribute(\"replyTo\", \"\").replace(\"_\".toRegex(), \" \")\r\n                    player.setAttribute(\"runscript\", object : RunScript() {\r\n                        override fun handle(): Boolean {\r\n                            CommunicationInfo.sendMessage(player, replyTo.toLowerCase(), getValue() as String)\r\n                            player.removeAttribute(\"keepDialogueAlive\")\r\n                            return true\r\n                        }\r\n                    })\r\n                    player.dialogueInterpreter.sendMessageInput(StringUtils.formatDisplayName(replyTo))\r\n                } else {\r\n                    player.packetDispatch.sendMessage(\"<col=3498db>You have not recieved any recent messages to which you can reply.\")\r\n                }\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    /**\r\n     * Sends commands.\r\n     * @param player the player.\r\n     */\r\n    /**\r\n     * ::npcs lists NPCs in the area and their IDs\r\n     * @author ceik\r\n     */\r\n    fun getNPCs(player: Player?) {\r\n        player!!.interfaceManager.close()\r\n        val npcs = RegionManager.getLocalNpcs(player)\r\n        for (i in 0..310) {\r\n            player.packetDispatch.sendString(\"\", 275, i)\r\n        }\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>Nearby NPCs</col>\", 275, 2)\r\n        var lineid = 11\r\n        for (n in npcs) {\r\n            player.packetDispatch.sendString(\"<col=05edce>[\" + n.id + \"]</col> \" + \"<col=f5fffe>\" + n.name + \"</col>\", 275, lineid++)\r\n        }\r\n        player.interfaceManager.open(Component(275))\r\n    }\r\n\r\n    /**\r\n     * ::drops lists the drops for a specific NPC ID\r\n     * @author ceik\r\n     */\r\n    fun getDrops(player: Player?, npc: Int) {\r\n        player!!.interfaceManager.close()\r\n        for (i in 0..310) {\r\n            player.packetDispatch.sendString(\"\", 275, i)\r\n        }\r\n        var lineid = 11\r\n        val drops = NPCDefinition.forId(npc).dropTables.mainTable\r\n        val drop: ListIterator<*> = drops.listIterator()\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>\" + NPCDefinition.forId(npc).name + \" (Level \" + NPCDefinition.forId(npc).combatLevel + \")</col>\", 275, 2)\r\n        while (drop.hasNext()) {\r\n            val current = drop.next() as ChanceItem\r\n            var rarity = \"\"\r\n            when (current.dropFrequency) {\r\n                DropFrequency.UNCOMMON -> rarity = \"<col=edce05>UNCOMMON</col>\"\r\n                DropFrequency.RARE -> rarity = \"<col=ff6b08>RARE</col>\"\r\n                DropFrequency.VERY_RARE -> rarity = \"<col=ff0000>VERY RARE</col>\"\r\n                DropFrequency.COMMON -> rarity = \"<col=04c91e>COMMON</col>\"\r\n            }\r\n            player.packetDispatch.sendString(\"(\" + rarity + \") <col=f5fffe>\" + (if (current.minimumAmount - current.maximumAmount != 0) current.minimumAmount.toString() + \"-\" + current.maximumAmount else \"\") + \" \" + ItemDefinition.forId(current.id).name + \"</col>\", 275, lineid++)\r\n        }\r\n        player.interfaceManager.open(Component(275))\r\n    }\r\n\r\n    /**\r\n     * ::roll command\r\n     * @author ceik\r\n     */\r\n    fun rollSkill(player: Player?) {\r\n        val rareEventChance = RandomFunction.random(100) == 54\r\n        if (rareEventChance) {\r\n            val rareChoice = RandomFunction.random(2, 5)\r\n            if (rareChoice % 5 == 0) {\r\n                player!!.sendChat(\"Oh god! Somebody help me!\")\r\n                player.animator.reset()\r\n                player.animator.forceAnimation(Animation(3123))\r\n                return\r\n            }\r\n            if (rareChoice % 2 == 0) {\r\n                player!!.sendChat(\"Yibbly jibbly dibbly nibbly doo dah\")\r\n                return\r\n            }\r\n            if (rareChoice % 3 == 0) {\r\n                player!!.sendChat(\"Oh god! Somebody help me!\")\r\n                player.animator.reset()\r\n                player.animator.forceAnimation(Animation(92))\r\n                return\r\n            }\r\n        }\r\n        val skill = RandomFunction.random(0, 23)\r\n        player!!.sendChat(\"I think I should train \" + Skills.SKILL_NAME[skill])\r\n    }\r\n\r\n    /**\r\n     * Sends commands.\r\n     * @param player the player.\r\n     */\r\n    private fun sendCommands(player: Player?) {\r\n        if (player!!.interfaceManager.isOpened) {\r\n            player.sendMessage(\"Finish what you're currently doing.\")\r\n            return\r\n        }\r\n        player.interfaceManager.open(Component(275))\r\n        //CLear old data\r\n        for (i in 0..310) {\r\n            player.packetDispatch.sendString(\"\", 275, i)\r\n        }\r\n        // Title\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>\" + GameWorld.getName() + \" commands</col>\", 275, 2)\r\n\r\n        // Content\r\n        var lineId = 11\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>::commands\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=2c3e50>Shows this list.\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>::players\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=2c3e50>Get online player count.\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>::npcs\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=2c3e50>Lists all NPCs in your areas and their IDs\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>::drops id\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=2c3e50>Lists drops for a given NPC id\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>::quests\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=2c3e50>Shows a list of all available quests.\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>::togglenews\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=2c3e50>Toggles the news broadcasts.\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>::toggleatk\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=2c3e50>Toggles left-click attack option mode.\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>::bankresetpin [pin]\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=2c3e50>Remove your bank pin.\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>::bankresettabs\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=2c3e50>Reset all of your bank tabs.\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>::stats\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=2c3e50>View a player's stats.\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>::roll\", 275, lineId++)\r\n        player.packetDispatch.sendString(\"<col=2c3e50>Picks a skill to train for you, and perhaps more?\", 275, lineId++)\r\n    }\r\n\r\n    /**\r\n     * Sends the quests.\r\n     * @param player the player.\r\n     */\r\n    private fun sendQuests(player: Player?) {\r\n        player!!.interfaceManager.open(Component(275))\r\n        for (i in 0..310) {\r\n            player.packetDispatch.sendString(\"\", 275, i)\r\n        }\r\n        var lineId = 11\r\n        player.packetDispatch.sendString(\"<col=ecf0f1>\" + \"Available Quests\" + \"</col>\", 275, 2)\r\n        for (q in QuestRepository.getQuests().values) {\r\n            // Add a space to beginning and end of string for the strikethrough\r\n            player.packetDispatch.sendString(\"<col=ecf0f1>\" + (if (q.isCompleted(player)) \"<str> \" else \"\") + q.name + \" \", 275, lineId++)\r\n        }\r\n    }\r\n\r\n    companion object {\r\n        /**\r\n         * Gets the yell prefix for the given player.\r\n         * @param player The player.\r\n         * @return The prefix used in yell.\r\n         */\r\n        private fun getYellPrefix(player: Player?): String {\r\n            var color = \"<col=800080>\"\r\n            val sb = StringBuilder(\"[\")\r\n            if (player!!.details.rights.isVisible(player)) {\r\n                val right = player.getAttribute(\"visible_rank\", player.details.rights)\r\n                when (right) {\r\n                    Rights.ADMINISTRATOR -> color = \"<col=009999>\"\r\n                    Rights.PLAYER_MODERATOR -> color = \"<col=81819B>\"\r\n                    else -> {\r\n                    }\r\n                }\r\n            }\r\n            val icon = Rights.getChatIcon(player)\r\n            if (icon > 0) {\r\n                sb.append(\"<img=\").append(icon - 1).append(\">\")\r\n            }\r\n            sb.append(color).append(player.username).append(\"</col>\")\r\n            sb.append(\"]: \").append(color)\r\n            return sb.toString()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Server/src/main/java/Server/plugin/command/PlayerCommandPlugin.kt	(revision 61b8cd0b4d8789d9e0f5e23e19215748def26c45)
+++ Server/src/main/java/Server/plugin/command/PlayerCommandPlugin.kt	(date 1599233071301)
@@ -26,6 +26,7 @@
 import core.plugin.Plugin
 import core.tools.RandomFunction
 import core.tools.StringUtils
+import plugin.dialogue.HansDialoguePlugin
 import plugin.ge.GEOfferDispatch
 import plugin.skill.Skills
 
@@ -43,6 +44,9 @@
 
     override fun parse(player: Player?, name: String?, arguments: Array<String?>?): Boolean {
         when (name) {
+            "prestige" -> {
+                PlayerStatisticsManager.sendHiscore(player, player)
+            }
             "stats" -> {
                 PlayerStatisticsManager.sendHiscore(player, player)
             }
Index: Server/src/main/java/Server/plugin/skill/Skills.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package plugin.skill;\r\n\r\nimport core.game.content.global.SkillcapePerks;\r\nimport core.game.world.GameWorld;\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\nimport plugin.ame.ExperienceMonitor;\r\nimport plugin.quest.tutorials.tutorialisland.TutorialSession;\r\nimport core.game.node.entity.Entity;\r\nimport core.game.node.entity.combat.ImpactHandler;\r\nimport core.game.node.entity.npc.NPC;\r\nimport core.game.node.entity.player.Player;\r\nimport core.game.node.entity.player.link.request.assist.AssistSession;\r\nimport core.game.node.item.Item;\r\nimport core.game.world.repository.Repository;\r\nimport core.game.world.update.flag.player.AppearanceFlag;\r\nimport core.net.packet.PacketRepository;\r\nimport core.net.packet.context.SkillContext;\r\nimport core.net.packet.out.SkillLevel;\r\nimport plugin.interaction.item.brawling_gloves.BrawlingGloves;\r\n\r\nimport java.nio.ByteBuffer;\r\n\r\n/**\r\n * Represents an entity's skills.\r\n * @author Emperor\r\n */\r\npublic final class Skills {\r\n\r\n\t/**\r\n\t * Represents the constant modifier of experience.\r\n\t */\r\n\tpublic double experienceMutiplier = 2.5;\r\n\r\n\t/**\r\n\t * The maximum experience multiplier.\r\n\t */\r\n\tpublic static final double MAX_EXPERIENCE_MOD = 60.0;\r\n\r\n\t/**\r\n\t * Represents an array of skill names.\r\n\t */\r\n\tpublic static final String[] SKILL_NAME = { \"Attack\", \"Defence\", \"Strength\", \"Hitpoints\", \"Ranged\", \"Prayer\", \"Magic\", \"Cooking\", \"Woodcutting\", \"Fletching\", \"Fishing\", \"Firemaking\", \"Crafting\", \"Smithing\", \"Mining\", \"Herblore\", \"Agility\", \"Thieving\", \"Slayer\", \"Farming\", \"Runecrafting\", \"Hunter\", \"Construction\", \"Summoning\" };\r\n\r\n\t/**\r\n\t * Constants for the skill ids.\r\n\t */\r\n\tpublic static final int ATTACK = 0, DEFENCE = 1, STRENGTH = 2, HITPOINTS = 3, RANGE = 4, PRAYER = 5, MAGIC = 6, COOKING = 7, WOODCUTTING = 8, FLETCHING = 9, FISHING = 10, FIREMAKING = 11, CRAFTING = 12, SMITHING = 13, MINING = 14, HERBLORE = 15, AGILITY = 16, THIEVING = 17, SLAYER = 18, FARMING = 19, RUNECRAFTING = 20, HUNTER = 21, CONSTRUCTION = 22, SUMMONING = 23;\r\n\r\n\t/**\r\n\t * Number of skills in game\r\n\t */\r\n\tpublic static final int NUM_SKILLS = 24;\r\n\r\n\t/**\r\n\t * Represents the entity instance.\r\n\t */\r\n\tprivate final Entity entity;\r\n\r\n\t/**\r\n\t * An array containing all the player's experience.\r\n\t */\r\n\tprivate final double[] experience;\r\n\r\n\t/**\r\n\t * An array containing all the maximum levels.\r\n\t */\r\n\tprivate final int[] staticLevels;\r\n\r\n\t/**\r\n\t * An array containing all the current levels.\r\n\t */\r\n\tprivate final int[] dynamicLevels;\r\n\r\n\t/*\r\n\t* Prestige holder\r\n\t* */\r\n\tprivate final int[] prestige;\r\n\r\n\t/**\r\n\t * Represents the amount of prayer points left.\r\n\t */\r\n\tprivate double prayerPoints = 1.;\r\n\r\n\t/**\r\n\t * The player's life-points.\r\n\t */\r\n\tprivate int lifepoints = 10;\r\n\r\n\t/**\r\n\t * The amount of increased maximum lifepoints.\r\n\t */\r\n\tprivate int lifepointsIncrease = 0;\r\n\r\n\t/**\r\n\t * The total experience gained.\r\n\t */\r\n\tprivate double experienceGained = 0;\r\n\r\n\t/**\r\n\t * The restoration pulses.\r\n\t */\r\n\tprivate final SkillRestoration[] restoration;\r\n\r\n\t/**\r\n\t * If a lifepoints update should occur.\r\n\t */\r\n\tprivate boolean lifepointsUpdate;\r\n\r\n\t/**\r\n\t * The combat milestones.\r\n\t */\r\n\tprivate int combatMilestone;\r\n\r\n\t/**\r\n\t * The skilling milestones.\r\n\t */\r\n\tprivate int skillMilestone;\r\n\r\n\t/**\r\n\t * Constructs a new {@code Skills} {@code Object}.\r\n\t * @param entity The entity.\r\n\t */\r\n\tpublic Skills(Entity entity) {//TODO: make prestige for skills here?\r\n\t\tthis.entity = entity;\r\n\t\tthis.experience = new double[24];\r\n\t\tthis.staticLevels = new int[24];\r\n\t\tthis.dynamicLevels = new int[24];\r\n\t\tthis.prestige = new int[24];\r\n\t\tthis.restoration = new SkillRestoration[24];\r\n\t\tfor (int i = 0; i < 24; i++) {\r\n\t\t\tthis.staticLevels[i] = 1;\r\n\t\t\tthis.dynamicLevels[i] = 1;\r\n\t\t}\r\n\t\tthis.experience[HITPOINTS] = 1154;\r\n\t\tthis.dynamicLevels[HITPOINTS] = 10;\r\n\t\tthis.staticLevels[HITPOINTS] = 10;\r\n\t\tentity.getProperties().setCombatLevel(3);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Determine whether the specified skill is a combat skill.\r\n\t * Prayer and Summoning are included and counted as combat skills.\r\n\t * @param skill\r\n\t * @return true if so.\r\n\t */\r\n\tpublic boolean isCombat(int skill){\r\n\t\tif((skill >= ATTACK && skill <= MAGIC) || (skill == SUMMONING)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Configures the skills.\r\n\t */\r\n\tpublic void configure() {\r\n\t\tupdateCombatLevel();\r\n\t\tint max = 24;\r\n\t\tif (entity instanceof NPC) {\r\n\t\t\tmax = 7;\r\n\t\t}\r\n\t\tfor (int i = 0; i < max; i++) {\r\n\t\t\tif (i != PRAYER && i != SUMMONING && restoration[i] == null) {\r\n\t\t\t\tconfigureRestorationPulse(i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Called every pulse (600ms).\r\n\t */\r\n\tpublic void pulse() {\r\n\t\tif (lifepoints < 1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (int i = 0; i < restoration.length; i++) {\r\n\t\t\tif (restoration[i] != null) {\r\n\t\t\t\tif (restoration[i] == restoration[FISHING]) {\r\n\t\t\t\t\tif (SkillcapePerks.hasSkillcapePerk(entity.asPlayer(), SkillcapePerks.FISHING)) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trestoration[i].restore(entity);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Configures a restoration pulse for the given skill id.\r\n\t * @param skillId The skill id.\r\n\t */\r\n\tprivate void configureRestorationPulse(final int skillId) {\r\n\t\trestoration[skillId] = new SkillRestoration(skillId);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the skills data.\r\n\t * @param skills The skills.\r\n\t */\r\n\tpublic void copy(Skills skills) {//TODO: This copy skills may be used a lot\r\n\t\tfor (int i = 0; i < 24; i++) {\r\n\t\t\tthis.staticLevels[i] = skills.staticLevels[i];\r\n\t\t\tthis.dynamicLevels[i] = skills.dynamicLevels[i];\r\n\t\t\tthis.experience[i] = skills.experience[i];\r\n\t\t}\r\n\t\tprayerPoints = skills.prayerPoints;\r\n\t\tlifepoints = skills.lifepoints;\r\n\t\tlifepointsIncrease = skills.lifepointsIncrease;\r\n\t\texperienceGained = skills.experienceGained;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds experience to a skill.\r\n\t * @param slot The skill slot.\r\n\t * @param experience The experience.\r\n\t */\r\n\tpublic void addExperience(int slot, double experience, boolean playerMod) {\r\n\t\tdouble mod = getExperienceMod(slot, experience, playerMod, true);\r\n\t\tfinal Player player = entity instanceof Player ? ((Player) entity) : null;\r\n\t\tfinal AssistSession assist = entity.getExtension(AssistSession.class);\r\n\t\tif (assist != null && assist.translateExperience(player, slot, experience, mod)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tboolean already200m = this.experience[slot] == 200000000;\r\n\t\tdouble experienceAdd = (experience * mod);\r\n\t\t//check if a player has brawling gloves and, if equipped, modify xp\r\n\t\tif(!player.getBrawlingGlovesManager().GloveCharges.isEmpty()){\r\n\t\t\tItem gloves = BrawlingGloves.forSkill(slot) == null ? null : new Item(BrawlingGloves.forSkill(slot).getId());\r\n\t\t\tif(gloves == null && (slot == Skills.STRENGTH || slot == Skills.DEFENCE)){\r\n\t\t\t\tgloves = new Item (BrawlingGloves.forSkill(Skills.ATTACK).getId());\r\n\t\t\t}\r\n\t\t\tif(gloves != null && player.getEquipment().containsItem(gloves)){\r\n\t\t\t\texperienceAdd += experienceAdd * player.getBrawlingGlovesManager().getExperienceBonus();\r\n\t\t\t\tplayer.getBrawlingGlovesManager().updateCharges(gloves.getId(),1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.experience[slot] += experienceAdd;\r\n\t\ttry {\r\n\t\t\tplayer.getAntiMacroHandler().monitors[slot].setExperienceAmount((int) experienceAdd);\r\n\t\t} catch (Exception e){\r\n\t\t\tplayer.getAntiMacroHandler().monitors[slot] = new ExperienceMonitor(slot);\r\n\t\t\tplayer.getAntiMacroHandler().monitors[slot].setExperienceAmount((int) experienceAdd);\r\n\t\t}\r\n\t\tif (this.experience[slot] >= 200000000) {\r\n\t\t\tif(!already200m && !player.isArtificial()){\r\n\t\t\t\tRepository.sendNews(entity.asPlayer().getUsername()+\" has just reached 200m experience in \" + SKILL_NAME[slot] + \"!\");\r\n\t\t\t}\r\n\t\t\tthis.experience[slot] = 200000000;\r\n\t\t}\r\n\t\tif (entity instanceof Player && this.experience[slot] > 175) {\r\n\t\t\tif (player.getSavedData().getGlobalData().getTutorialStage() < TutorialSession.MAX_STAGE && slot != HITPOINTS) {\r\n\t\t\t\tthis.experience[slot] = 175;\r\n\t\t\t}\r\n\t\t}\r\n\t\texperienceGained += experienceAdd;\r\n\t\tint newLevel = getStaticLevelByExperience(slot);\r\n\t\tif (newLevel > staticLevels[slot]) {\r\n\t\t\tint amount = newLevel - staticLevels[slot];\r\n\t\t\tif (dynamicLevels[slot] < newLevel) {\r\n\t\t\t\tdynamicLevels[slot] += amount;\r\n\t\t\t}\r\n\t\t\tif (slot == HITPOINTS) {\r\n\t\t\t\tlifepoints += amount;\r\n\t\t\t}\r\n\t\t\tstaticLevels[slot] = newLevel;\r\n\t\t\tif(newLevel == 99 && !player.isArtificial()){\r\n\t\t\t\tRepository.sendNews(entity.asPlayer().getUsername() + \" has just achieved level 99 \" + SKILL_NAME[slot]);\r\n\t\t\t}\r\n\t\t\tif (entity instanceof Player) {\r\n\t\t\t\tif (updateCombatLevel()) {\r\n\t\t\t\t\tplayer.getUpdateMasks().register(new AppearanceFlag(player));\r\n\t\t\t\t}\r\n\t\t\t\tLevelUp.levelup(player, slot, amount);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (entity instanceof Player) {\r\n\t\t\tPacketRepository.send(SkillLevel.class, new SkillContext((Player) entity, slot));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the current experience mod.\r\n\t * @param slot The skill slot.\r\n\t * @param experience The experience gained.\r\n\t * @param playerMod If player mods should be applied.\r\n\t * @return The experience mod.\r\n\t */\r\n\tprivate double getExperienceMod(int slot, double experience, boolean playerMod, boolean multiplyer) {\r\n\t\t//Keywords for people ctrl + Fing the project\r\n\t\t//xprate xp rate xp multiplier skilling rate\r\n\t\treturn experienceMutiplier;\r\n\t\t/*if (!(entity instanceof Player)) {\r\n\t\t\treturn 1.0;\r\n\t\t}\r\n\t\tdouble mod = multiplyer ? (EXPERIENCE_MULTIPLIER) : 1;\r\n\t\tPlayer p = (Player) entity;\r\n\t\tif (p.getIronmanManager().getMode() == IronmanMode.ULTIMATE) {\r\n\t\t\tmod /= 4;\r\n\t\t} else if (p.getIronmanManager().getMode() == IronmanMode.STANDARD) {\r\n\t\t\tmod /= 2;\r\n\t\t}\r\n\t\t//A boost for combat skills that are under level 65.\r\n\t\tif(entity instanceof Player && !this.hasLevel(slot, 65) && isCombat(slot)){\r\n\t\t\tmod *= 1.5;\r\n\t\t}\r\n\t\t//Grand Exchange region XP boost.\r\n\t\tif(entity.getViewport().getRegion().getRegionId() == 12598){\r\n\t\t\tmod += 1.5;\r\n\t\t}\r\n\t\t// Pest control, XP halved during the game\r\n\t\tif (entity.getViewport().getRegion().getRegionId() == 10536) {\r\n\t\t\tmod *= .5;\r\n\t\t}\r\n\t\tif (SystemManager.getSystemConfig().isDoubleExp()) {\r\n\t\t\tmod *= 2;\r\n\t\t}\r\n\t\tif (HolidayEvent.getCurrent() != null) {\r\n\t\t\tHolidayEvent.getCurrent().addExperience(p, slot, experience);\r\n\t\t}\r\n\t\tp.getAntiMacroHandler().registerExperience(slot, experience);\r\n\t\tif (TutorialSession.getExtension(p).getStage() < TutorialSession.MAX_STAGE) {\r\n\t\t\tmod = 1.0;\r\n\t\t} else {\r\n\t\t\tif (playerMod && p.getExperienceMod() != 0.0) {\r\n\t\t\t\tmod *= p.getExperienceMod();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (mod > MAX_EXPERIENCE_MOD ) {\r\n\t\t\treturn MAX_EXPERIENCE_MOD;\r\n\t\t}\r\n\t\treturn mod;*/\r\n\t}\r\n\r\n\t/**\r\n\t * Adds experience to the skills.\r\n\t */\r\n\tpublic void addExperience(final int slot, double experience) {\r\n\t\taddExperience(slot, experience, false);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the highest combat skill id.\r\n\t * @return The id of the highest combat skill.\r\n\t */\r\n\tpublic int getHighestCombatSkill() {\r\n\t\tint id = 0;\r\n\t\tint last = 0;\r\n\t\tfor (int i = 0; i < 5; i++) {\r\n\t\t\tif (staticLevels[i] > last) {\r\n\t\t\t\tlast = staticLevels[i];\r\n\t\t\t\tid = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn id;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the dynamic levels to the static levels\r\n\t */\r\n\tpublic void restore() {\r\n\t\tfor (int i = 0; i < 24; i++) {\r\n\t\t\tint staticLevel = getStaticLevel(i);\r\n\t\t\tsetLevel(i, staticLevel);\r\n\t\t}\r\n\t\tif (entity instanceof Player) {\r\n\t\t\tentity.asPlayer().getAudioManager().send(2674);\r\n\t\t}\r\n\t\trechargePrayerPoints();\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the skill data from the buffer.\r\n\t * @param buffer The byte buffer.\r\n\t */\r\n\tpublic void parse(ByteBuffer buffer) {\r\n\t\tfor (int i = 0; i < 24; i++) {\r\n\t\t\texperience[i] = ((double) buffer.getInt() / 10D);\r\n\t\t\tdynamicLevels[i] = buffer.get() & 0xFF;\r\n\t\t\tif (i == HITPOINTS) {\r\n\t\t\t\tlifepoints = dynamicLevels[i];\r\n\t\t\t} else if (i == PRAYER) {\r\n\t\t\t\tprayerPoints = dynamicLevels[i];\r\n\t\t\t}\r\n\t\t\tstaticLevels[i] = buffer.get() & 0xFF;\r\n\t\t}\r\n\t\texperienceGained = buffer.getInt();\r\n\t}\r\n\r\n\tpublic void parse(JSONArray skillData){//TODO: Parse into Player class here\r\n\t\tfor(int i = 0; i < skillData.size(); i++){\r\n\t\t\tJSONObject skill = (JSONObject) skillData.get(i);\r\n\t\t\tint id = Integer.parseInt( skill.get(\"id\").toString());\r\n\t\t\tdynamicLevels[id] = Integer.parseInt( skill.get(\"dynamic\").toString());\r\n\t\t\tif (id == HITPOINTS) {\r\n\t\t\t\tlifepoints = dynamicLevels[i];\r\n\t\t\t} else if (id == PRAYER) {\r\n\t\t\t\tprayerPoints = dynamicLevels[i];\r\n\t\t\t}\r\n\t\t\tstaticLevels[id] = Integer.parseInt( skill.get(\"static\").toString());\r\n\t\t\texperience[id] = Double.parseDouble(skill.get(\"experience\").toString());\r\n\t\t\tprestige[id] = Integer.parseInt( skill.get(\"prestige\").toString());;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void parseExpRate(ByteBuffer buffer) {\r\n\t\texperienceMutiplier = buffer.getDouble();\r\n\t\tif(GameWorld.getSettings().getDefault_xp_rate() != experienceMutiplier){\r\n\t\t\texperienceMutiplier = GameWorld.getSettings().getDefault_xp_rate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Saves the skill data on the buffer.\r\n\t * @param buffer The byte buffer.\r\n\t */\r\n\tpublic void save(ByteBuffer buffer) {\r\n\t\tfor (int i = 0; i < 24; i++) {\r\n\t\t\tbuffer.putInt((int) (experience[i] * 10));\r\n\t\t\tif (i == HITPOINTS) {\r\n\t\t\t\tbuffer.put((byte) lifepoints);\r\n\t\t\t} else if (i == PRAYER) {\r\n\t\t\t\tbuffer.put((byte) Math.ceil(prayerPoints));\r\n\t\t\t} else {\r\n\t\t\t\tbuffer.put((byte) dynamicLevels[i]);\r\n\t\t\t}\r\n\t\t\tbuffer.put((byte) staticLevels[i]);\r\n\t\t}\r\n\t\tbuffer.putInt((int) experienceGained);\r\n\t}\r\n\r\n\tpublic void saveExpRate(ByteBuffer buffer) {\r\n\t\tbuffer.putDouble(experienceMutiplier);\r\n\t}\r\n\r\n\t/**\r\n\t * Refreshes all the skill levels.\r\n\t */\r\n\tpublic void refresh() {\r\n\t\tif (!(entity instanceof Player)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tPlayer player = (Player) entity;\r\n\t\tfor (int i = 0; i < 24; i++) {\r\n\t\t\tPacketRepository.send(SkillLevel.class, new SkillContext(player, i));\r\n\t\t}\r\n\t\tLevelUp.sendFlashingIcons(player, -1);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the static level.\r\n\t * @param slot The skill's slot.\r\n\t * @return The level.\r\n\t */\r\n\tpublic int getStaticLevelByExperience(int slot) {\r\n\t\tdouble exp = experience[slot];\r\n\r\n\t\tint points = 0;\r\n\t\tint output = 0;\r\n\t\tfor (byte lvl = 1; lvl < 100; lvl++) {\r\n\t\t\tpoints += Math.floor(lvl + 300.0 * Math.pow(2.0, lvl / 7.0));\r\n\t\t\toutput = (int) Math.floor(points / 4);\r\n\t\t\tif ((output - 1) >= exp) {\r\n\t\t\t\treturn lvl;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 99;\r\n\t}\r\n\r\n\tpublic int levelFromXP(double exp) {\r\n\r\n\t\tint points = 0;\r\n\t\tint output = 0;\r\n\t\tfor (byte lvl = 1; lvl < 100; lvl++) {\r\n\t\t\tpoints += Math.floor(lvl + 300.0 * Math.pow(2.0, lvl / 7.0));\r\n\t\t\toutput = (int) Math.floor(points / 4);\r\n\t\t\tif ((output - 1) >= exp) {\r\n\t\t\t\treturn lvl;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 99;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the experience for a certain level.\r\n\t * @param level The level.\r\n\t * @return The experience needed.\r\n\t */\r\n\tpublic int getExperienceByLevel(int level) {\r\n\t\tint points = 0;\r\n\t\tint output = 0;\r\n\t\tfor (int lvl = 1; lvl <= level; lvl++) {\r\n\t\t\tpoints += Math.floor(lvl + 300.0 * Math.pow(2.0, lvl / 7.0));\r\n\t\t\tif (lvl >= level) {\r\n\t\t\t\treturn output;\r\n\t\t\t}\r\n\t\t\toutput = (int) Math.floor(points / 4);\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the combat level.\r\n\t * @return {@code True} if the combat level changed.\r\n\t */\r\n\t@SuppressWarnings(\"deprecation\")\r\n\tpublic boolean updateCombatLevel() {\r\n\t\tboolean update = false;\r\n\t\tint level = calculateCombatLevel();\r\n\t\tupdate = level != entity.getProperties().getCombatLevel();\r\n\t\tif (entity instanceof Player) {\r\n\t\t\tPlayer player = (Player) entity;\r\n\t\t\tint summon = staticLevels[SUMMONING] / 8;\r\n\t\t\tif (summon != player.getFamiliarManager().getSummoningCombatLevel()) {\r\n\t\t\t\tplayer.getFamiliarManager().setSummoningCombatLevel(summon);\r\n\t\t\t\tupdate = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tentity.getProperties().setCombatLevel(level);\r\n\t\treturn update;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the combat level (ignoring summoning).\r\n\t * @return The combat level.\r\n\t */\r\n\tprivate int calculateCombatLevel() {\r\n\t\tif (entity instanceof NPC) {\r\n\t\t\treturn ((NPC) entity).getDefinition().getCombatLevel();\r\n\t\t}\r\n\t\tint combatLevel = 0;\r\n\t\tint melee = staticLevels[ATTACK] + staticLevels[STRENGTH];\r\n\t\tint range = (int) (1.5 * staticLevels[RANGE]);\r\n\t\tint mage = (int) (1.5 * staticLevels[MAGIC]);\r\n\t\tif (melee > range && melee > mage) {\r\n\t\t\tcombatLevel = melee;\r\n\t\t} else if (range > melee && range > mage) {\r\n\t\t\tcombatLevel = range;\r\n\t\t} else {\r\n\t\t\tcombatLevel = mage;\r\n\t\t}\r\n\t\tcombatLevel = staticLevels[DEFENCE] + staticLevels[HITPOINTS] + (staticLevels[PRAYER] / 2) + (int) (1.3 * combatLevel);\r\n\t\treturn combatLevel / 4;\r\n\t}\r\n\r\n\t/**\r\n\t * @return the player\r\n\t */\r\n\tpublic Entity getEntity() {\r\n\t\treturn entity;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the experience.\r\n\t * @param slot The slot.\r\n\t * @return The experience.\r\n\t */\r\n\tpublic double getExperience(int slot) {\r\n\t\treturn experience[slot];\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the static skill level.\r\n\t * @param slot The slot.\r\n\t * @return The static level.\r\n\t */\r\n\tpublic int getStaticLevel(int slot) {\r\n\t\treturn staticLevels[slot];\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the prestige skill level.\r\n\t * @param slot The slot.\r\n\t * @return The prestige level.\r\n\t */\r\n\tpublic int getPrestigeLevel(int slot) {\r\n\t\treturn prestige[slot];\r\n\t}\r\n\r\n\tpublic void addPrestigeLevel(int slot) {\r\n\t\tprestige[slot] = prestige[slot]++;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the experience gained.\r\n\t * @param experienceGained The experience gained.\r\n\t */\r\n\tpublic void setExperienceGained(double experienceGained) {\r\n\t\tthis.experienceGained = experienceGained;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the experience gained.\r\n\t * @return The experience gained.\r\n\t */\r\n\tpublic double getExperienceGained() {\r\n\t\treturn experienceGained;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a dynamic level.\r\n\t * @param slot The skill id.\r\n\t * @param level The level.\r\n\t */\r\n\tpublic void setLevel(int slot, int level) {\r\n\t\tif (slot == HITPOINTS) {\r\n\t\t\tlifepoints = level;\r\n\t\t} else if (slot == PRAYER) {\r\n\t\t\tprayerPoints = level;\r\n\t\t}\r\n\t\tdynamicLevels[slot] = level;\r\n\t\tif (restoration[slot] != null) {\r\n\t\t\trestoration[slot].restart();\r\n\t\t}\r\n\t\tif (entity instanceof Player) {\r\n\t\t\tPacketRepository.send(SkillLevel.class, new SkillContext((Player) entity, slot));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a dynamic level.\r\n\t * @param slot The skill id.\r\n\t * @return The dynamic level.\r\n\t */\r\n\tpublic int getLevel(int slot, boolean discardAssist) {\r\n\t\tif (!discardAssist) {\r\n\t\t\tif (entity instanceof Player) {\r\n\t\t\t\tfinal Player p = (Player) entity;\r\n\t\t\t\tfinal AssistSession assist = p.getExtension(AssistSession.class);\r\n\t\t\t\tif (assist != null && assist.getPlayer() != p) {\r\n\t\t\t\t\tPlayer assister = assist.getPlayer();\r\n\t\t\t\t\tint index = assist.getSkillIndex(slot);\r\n\t\t\t\t\tif (index != -1 && !assist.isRestricted()) {\r\n\t\t\t\t\t\t// System.out.println(index + \", \" +\r\n\t\t\t\t\t\t// assist.getSkills()[index] + \", \" + SKILL_NAME[slot]);\r\n\t\t\t\t\t\tif (assist.getSkills()[index]) {\r\n\t\t\t\t\t\t\tint assistLevel = assister.getSkills().getLevel(slot);\r\n\t\t\t\t\t\t\tint playerLevel = dynamicLevels[slot];\r\n\t\t\t\t\t\t\tif (assistLevel > playerLevel) {\r\n\t\t\t\t\t\t\t\treturn assistLevel;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dynamicLevels[slot];\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the level.\r\n\t * @param slot the slot.\r\n\t * @return the level.\r\n\t */\r\n\tpublic int getLevel(int slot) {\r\n\t\treturn getLevel(slot, false);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the current amount of lifepoints.\r\n\t * @param lifepoints The lifepoints.\r\n\t */\r\n\tpublic void setLifepoints(int lifepoints) {\r\n\t\tthis.lifepoints = lifepoints;\r\n\t\tif (this.lifepoints < 0) {\r\n\t\t\tthis.lifepoints = 0;\r\n\t\t}\r\n\t\tlifepointsUpdate = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the lifepoints.\r\n\t * @return The lifepoints.\r\n\t */\r\n\tpublic int getLifepoints() {\r\n\t\treturn lifepoints;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the maximum amount of lifepoints.\r\n\t * @return The maximum amount.\r\n\t */\r\n\tpublic int getMaximumLifepoints() {\r\n\t\treturn staticLevels[HITPOINTS] + lifepointsIncrease;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the amount of lifepoints increase.\r\n\t * @param amount The amount.\r\n\t */\r\n\tpublic void setLifepointsIncrease(int amount) {\r\n\t\tthis.lifepointsIncrease = amount;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds lifepoints to the entity.\r\n\t * @param health The amount to add.\r\n\t * @return The amount of overflow.\r\n\t */\r\n\tpublic int heal(int health) {\r\n\t\tlifepoints += health;\r\n\t\tint left = 0;\r\n\t\tif (lifepoints > getMaximumLifepoints()) {\r\n\t\t\tleft = lifepoints - getMaximumLifepoints();\r\n\t\t\tlifepoints = getMaximumLifepoints();\r\n\t\t}\r\n\t\tlifepointsUpdate = true;\r\n\t\treturn left;\r\n\t}\r\n\r\n\t/**\r\n\t * @Deprecated Use\r\n\t * {@link ImpactHandler#manualHit(Entity, int, ImpactHandler.HitsplatType)}\r\n\t * or <br> the <b>hitsplat WILL NOT show and combat will be\r\n\t * desynchronized!</b>\r\n\t * @param damage The amount to remove.\r\n\t * @return The amount of overflow.\r\n\t */\r\n\tpublic int hit(int damage) {\r\n\t\tlifepoints -= damage;\r\n\t\tint left = 0;\r\n\t\tif (lifepoints < 0) {\r\n\t\t\tleft = -lifepoints;\r\n\t\t\tlifepoints = 0;\r\n\t\t}\r\n\t\tlifepointsUpdate = true;\r\n\t\treturn left;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the prayer points.\r\n\t * @return The prayer points.\r\n\t */\r\n\tpublic double getPrayerPoints() {\r\n\t\treturn prayerPoints;\r\n\t}\r\n\r\n\t/**\r\n\t * Recharges the prayer points.\r\n\t */\r\n\tpublic void rechargePrayerPoints() {\r\n\t\tprayerPoints = staticLevels[PRAYER];\r\n\t\tif (entity instanceof Player) {\r\n\t\t\tPacketRepository.send(SkillLevel.class, new SkillContext((Player) entity, PRAYER));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the current amount of prayer points (by decrementing).\r\n\t * @param amount The amount to decrement with.\r\n\t */\r\n\tpublic void decrementPrayerPoints(double amount) {\r\n\t\tprayerPoints -= amount;\r\n\t\tif (prayerPoints < 0) {\r\n\t\t\tprayerPoints = 0;\r\n\t\t}\r\n\t\t// if (prayerPoints > staticLevels[PRAYER]) {\r\n\t\t// prayerPoints = staticLevels[PRAYER];\r\n\t\t// }\r\n\t\tif (entity instanceof Player) {\r\n\t\t\tPacketRepository.send(SkillLevel.class, new SkillContext((Player) entity, PRAYER));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the current amount of prayer points (by incrementing)\r\n\t * @param amount The amount to decrement with.\r\n\t */\r\n\tpublic void incrementPrayerPoints(double amount) {\r\n\t\tprayerPoints += amount;\r\n\t\tif (prayerPoints < 0) {\r\n\t\t\tprayerPoints = 0;\r\n\t\t}\r\n\t\tif (prayerPoints > staticLevels[PRAYER]) {\r\n\t\t\tprayerPoints = staticLevels[PRAYER];\r\n\t\t}\r\n\t\tif (entity instanceof Player) {\r\n\t\t\tPacketRepository.send(SkillLevel.class, new SkillContext((Player) entity, PRAYER));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the current prayer points (<b>without checking for being higher than\r\n\t * max</b>)\r\n\t * @param amount The amount.\r\n\t */\r\n\tpublic void setPrayerPoints(double amount) {\r\n\t\tprayerPoints = amount;\r\n\t\tif (entity instanceof Player) {\r\n\t\t\tPacketRepository.send(SkillLevel.class, new SkillContext((Player) entity, PRAYER));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the current skill level (by incrementing the current amount with\r\n\t * the given amount, up to the given maximum).\r\n\t * @param skill The skill id.\r\n\t * @param amount The amount to increment.\r\n\t * @param maximum The maximum amount the skill can be.\r\n\t * @return The amount of \"overflow\".\r\n\t */\r\n\tpublic int updateLevel(int skill, int amount, int maximum) {\r\n\t\tif (amount > 0 && dynamicLevels[skill] > maximum) {\r\n\t\t\treturn -amount;\r\n\t\t}\r\n\t\tint left = (dynamicLevels[skill] + amount) - maximum;\r\n\t\tint level = dynamicLevels[skill] += amount;\r\n\t\tif (level < 0) {\r\n\t\t\tdynamicLevels[skill] = 0;\r\n\t\t} else if (amount < 0 && level < maximum) {\r\n\t\t\tdynamicLevels[skill] = maximum;\r\n\t\t} else if (amount > 0 && level > maximum) {\r\n\t\t\tdynamicLevels[skill] = maximum;\r\n\t\t}\r\n\t\tif (restoration[skill] != null) {\r\n\t\t\trestoration[skill].restart();\r\n\t\t}\r\n\t\tif (entity instanceof Player) {\r\n\t\t\tPacketRepository.send(SkillLevel.class, new SkillContext((Player) entity, skill));\r\n\t\t}\r\n\t\treturn left;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a level.\r\n\t * @param skill the skill.\r\n\t * @param amount the amount.\r\n\t * @return the left.\r\n\t */\r\n\tpublic int updateLevel(int skill, int amount) {\r\n\t\treturn updateLevel(skill, amount, amount >= 0 ? getStaticLevel(skill) + amount : getStaticLevel(skill) - amount);\r\n\t}\r\n\r\n\t/**\r\n\t * Drains a certain percentage of a level.\r\n\t * @param skill The skill.\r\n\t * @param drainPercentage The drain percentage (0.05 indicates 5% drain).\r\n\t * @param maximumDrainPercentage The maximum drain percentage (0.05\r\n\t * indicates 5%).\r\n\t */\r\n\tpublic void drainLevel(int skill, double drainPercentage, double maximumDrainPercentage) {\r\n\t\tint drain = (int) (dynamicLevels[skill] * drainPercentage);\r\n\t\tint minimum = (int) (staticLevels[skill] * (1.0 - maximumDrainPercentage));\r\n\t\tupdateLevel(skill, -drain, minimum);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the static level.\r\n\t * @param skill The skill id.\r\n\t * @param level The level to set.\r\n\t */\r\n\tpublic void setStaticLevel(int skill, int level) {\r\n\t\texperience[skill] = getExperienceByLevel(staticLevels[skill] = dynamicLevels[skill] = level);\r\n\t\tif (entity instanceof Player) {\r\n\t\t\tPacketRepository.send(SkillLevel.class, new SkillContext((Player) entity, skill));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the restoration pulses.\r\n\t * @return The restoration pulse array.\r\n\t */\r\n\tpublic SkillRestoration[] getRestoration() {\r\n\t\treturn restoration;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the amount of mastered skills.\r\n\t * @return The amount of mastered skills.\r\n\t */\r\n\tpublic int getMasteredSkills() {\r\n\t\tint count = 0;\r\n\t\tfor (int i = 0; i < 23; i++) {\r\n\t\t\tif (getStaticLevel(i) >= 99) {\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn count;\r\n\t}\r\n\r\n\t/**\r\n\t * Method used to get the skill by the name.\r\n\t * @param name the name.\r\n\t * @return the skill.\r\n\t */\r\n\tpublic static int getSkillByName(final String name) {\r\n\t\tfor (int i = 0; i < SKILL_NAME.length; i++) {\r\n\t\t\tif (SKILL_NAME[i].equalsIgnoreCase(name)) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the total level.\r\n\t * @return the total level.\r\n\t */\r\n\tpublic int getTotalLevel() {\r\n\t\tint level = 0;\r\n\t\tfor (int i = 0; i < 24; i++) {\r\n\t\t\tlevel += getStaticLevel(i);\r\n\t\t}\r\n\t\treturn level;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the total exp.\r\n\t * @return the exp.\r\n\t */\r\n\tpublic int getTotalXp() {\r\n\t\tint total = 0;\r\n\t\tfor (int skill = 0; skill < Skills.SKILL_NAME.length; skill++) {\r\n\t\t\ttotal += this.getExperience(skill);\r\n\t\t}\r\n\t\treturn total;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the lifepointsUpdate.\r\n\t * @return The lifepointsUpdate.\r\n\t */\r\n\tpublic boolean isLifepointsUpdate() {\r\n\t\treturn lifepointsUpdate;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the lifepointsUpdate.\r\n\t * @param lifepointsUpdate The lifepointsUpdate to set.\r\n\t */\r\n\tpublic void setLifepointsUpdate(boolean lifepointsUpdate) {\r\n\t\tthis.lifepointsUpdate = lifepointsUpdate;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the statis levels.\r\n\t * @return the level.\r\n\t */\r\n\tpublic int[] getStaticLevels() {\r\n\t\treturn staticLevels;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the player has the required level.\r\n\t * @param skillId the skill id.\r\n\t * @param i the level.\r\n\t * @return {@code True} if so.\r\n\t */\r\n\tpublic boolean hasLevel(int skillId, int i) {\r\n\t\treturn getStaticLevel(skillId) >= i;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the combatMilestone value.\r\n\t * @return The combatMilestone.\r\n\t */\r\n\tpublic int getCombatMilestone() {\r\n\t\treturn combatMilestone;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the combatMilestones value.\r\n\t * @param combatMilestone The combatMilestones to set.\r\n\t */\r\n\tpublic void setCombatMilestone(int combatMilestone) {\r\n\t\tthis.combatMilestone = combatMilestone;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the skillMilestone value.\r\n\t * @return The skillMilestone.\r\n\t */\r\n\tpublic int getSkillMilestone() {\r\n\t\treturn skillMilestone;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the skillMilestone value.\r\n\t * @param skillMilestone The skillMilestone to set.\r\n\t */\r\n\tpublic void setSkillMilestone(int skillMilestone) {\r\n\t\tthis.skillMilestone = skillMilestone;\r\n\t}\r\n\r\n\tpublic int[] getDynamicLevels() {\r\n\t\treturn dynamicLevels;\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Server/src/main/java/Server/plugin/skill/Skills.java	(revision 61b8cd0b4d8789d9e0f5e23e19215748def26c45)
+++ Server/src/main/java/Server/plugin/skill/Skills.java	(date 1599232141126)
@@ -35,7 +35,7 @@
 	/**
 	 * The maximum experience multiplier.
 	 */
-	public static final double MAX_EXPERIENCE_MOD = 60.0;
+	public static final double MAX_EXPERIENCE_MOD = 300.0;
 
 	/**
 	 * Represents an array of skill names.
Index: Server/src/main/java/Server/core/Server.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package core\r\n\r\nimport core.game.system.SystemLogger\r\nimport core.game.system.SystemShutdownHook\r\nimport core.game.system.config.ServerConfigParser\r\nimport core.game.system.mysql.SQLManager\r\nimport core.game.world.GameSettings.Companion.parse\r\nimport core.game.world.GameWorld\r\nimport core.gui.ConsoleFrame\r\nimport core.net.NioReactor\r\nimport core.net.amsc.WorldCommunicator\r\nimport core.tools.TimeStamp\r\nimport core.tools.backup.AutoBackup\r\nimport plugin.ge.BotGrandExchange\r\nimport plugin.ge.GEAutoStock\r\nimport java.io.File\r\nimport java.net.BindException\r\nimport java.util.*\r\n\r\n/*\r\n* TODO:\r\n*  1. Create prestige hans command dialogue, just selecting is how to ask for prestige level up\r\n*  2. Start on thief prestige\r\n*       -Gold\r\n*       -seed amount randomizer, using default random lib\r\n* */\r\n\r\n/**\r\n * The main class, for those that are unable to read the class' name.\r\n * @author Emperor\r\n * @author Vexia\r\n */\r\nobject Server {\r\n    /**\r\n     * The time stamp of when the server started running.\r\n     */\r\n\t@JvmField\r\n\tvar startTime: Long = 0\r\n\r\n    /**\r\n     * The NIO reactor.\r\n     */\r\n    var reactor: NioReactor? = null\r\n    private val backup: AutoBackup? = null\r\n\r\n    /**\r\n     * The main method, in this method we load background utilities such as\r\n     * cache and our world, then end with starting networking.\r\n     * @param args The arguments cast on runtime.\r\n     * @throws Throwable When an exception occurs.\r\n     */\r\n    @Throws(Throwable::class)\r\n    @JvmStatic\r\n    fun main(args: Array<String>) {\r\n        if (args.isNotEmpty()) {\r\n            ServerConfigParser(args[0])\r\n        } else {\r\n            println(\"No config file supplied! Attempting to use default...\")\r\n            ServerConfigParser(\"Server/worldprops/default.json\")\r\n        }\r\n        if (GameWorld.getSettings()!!.isGui) {\r\n            try {\r\n                ConsoleFrame.getInstance().init()\r\n            } catch (e: Exception) {\r\n                println(\"X11 server missing - launching server with no GUI!\")\r\n            }\r\n        }\r\n        startTime = System.currentTimeMillis()\r\n        val t = TimeStamp()\r\n        //\t\tbackup = new AutoBackup();\r\n        GameWorld.prompt(true)\r\n        SQLManager.init()\r\n        Runtime.getRuntime().addShutdownHook(Thread(SystemShutdownHook()))\r\n        SystemLogger.log(\"Starting NIO reactor...\")\r\n        try {\r\n            NioReactor.configure(43594 + GameWorld.getSettings()!!.worldId).start()\r\n        } catch (e: BindException) {\r\n            println(\"Port \" + (43594 + GameWorld.getSettings()!!.worldId) + \" is already in use!\")\r\n            throw e\r\n        }\r\n        val timer = java.util.Timer()\r\n        val task = object : TimerTask() {\r\n            override fun run() {\r\n                autoReconnect()\r\n            }\r\n        }\r\n        timer.schedule(task, 0, 1000 * 60 * 5)\r\n        SystemLogger.log(GameWorld.getName() + \" flags \" + GameWorld.getSettings().toString())\r\n        SystemLogger.log(GameWorld.getName() + \" started in \" + t.duration(false, \"\") + \" milliseconds.\")\r\n        GEAutoStock.parse(ServerConstants.GRAND_EXCHANGE_DATA_PATH + \"itemstostock.xml\")\r\n        BotGrandExchange.loadOffersFromDB()\r\n        // TODO Run the eco kick starter 1 time for the live server then comment it out\r\n//\t\tResourceManager.kickStartEconomy();\r\n    }\r\n\r\n    fun autoReconnect() {\r\n        SystemLogger.log(\"Attempting autoreconnect of server\")\r\n        WorldCommunicator.connect()\r\n    }\r\n    /**\r\n     * Gets the startTime.\r\n     * @return the startTime\r\n     */\r\n    fun getStartTime(): Long {\r\n        return startTime\r\n    }\r\n\r\n    /**\r\n     * Sets the bastartTime.ZZ\r\n     * @param startTime the startTime to set.\r\n     */\r\n    fun setStartTime(startTime: Long) {\r\n        Server.startTime = startTime\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Server/src/main/java/Server/core/Server.kt	(revision 61b8cd0b4d8789d9e0f5e23e19215748def26c45)
+++ Server/src/main/java/Server/core/Server.kt	(date 1599231825359)
@@ -19,8 +19,7 @@
 
 /*
 * TODO:
-*  1. Create prestige hans command dialogue, just selecting is how to ask for prestige level up
-*  2. Start on thief prestige
+*  1. Start on thief prestige
 *       -Gold
 *       -seed amount randomizer, using default random lib
 * */
